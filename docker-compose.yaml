version: '3'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_nocodb:
  postgres_n8n:
  n8n_storage:
  acme_data:  # 用于存储Let's Encrypt证书

services:
  traefik:
    image: traefik:v3.4
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # HTTP入口点
      - "--entrypoints.web.address=:80"
      # HTTPS入口点
      - "--entrypoints.websecure.address=:443"
      # 配置证书解析器(Let's Encrypt)
      - "--certificatesresolvers.myresolver.acme.email=suchaprettyboi1227@gmail.com"  # 替换为你的邮箱
      - "--certificatesresolvers.myresolver.acme.storage=/acme/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"  # 映射HTTPS端口
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - acme_data:/acme  # 挂载证书存储卷
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`ati.victrex.link`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"  # 更改为使用HTTPS
      - "traefik.http.routers.traefik-dashboard.tls=true"  # 启用TLS
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=myresolver"  # 使用配置的证书解析器
      - "traefik.http.middlewares.traefik-strip.stripprefix.prefixes=/traefik"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-strip@docker"
      # 添加HTTP到HTTPS的重定向
      - "traefik.http.routers.traefik-dashboard-redirect.rule=Host(`ati.victrex.link`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.traefik-dashboard-redirect.entrypoints=web"
      - "traefik.http.routers.traefik-dashboard-redirect.middlewares=redirect-to-https@docker"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  postgres_nocodb:
    image: postgres
    container_name: pgsql-dev
    environment:
      POSTGRES_PASSWORD: zhy12345
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_nocodb:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U postgres -d postgres']
      interval: 5s
      timeout: 5s
      retries: 10

  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb-postgres
    environment:
      NC_DB: "pg://postgres_nocodb:5432?u=postgres&p=zhy12345&d=postgres"
      NC_AUTH_JWT_SECRET: "569a1821-0a93-45e8-87ab-eb857f20a010"
      NC_PUBLIC_URL: "https://ati.victrex.link/nocodb"
      NC_DASHBOARD_URL: "/nocodb/dashboard"  # 关键是这里设置完整路径
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nocodb.rule=Host(`ati.victrex.link`) && PathPrefix(`/nocodb`)"
      - "traefik.http.services.nocodb.loadbalancer.server.port=8080"
      - "traefik.http.routers.nocodb.entrypoints=websecure"
      - "traefik.http.routers.nocodb.tls=true"
      - "traefik.http.routers.nocodb.tls.certresolver=myresolver"
      
      # 使用改进的路径处理中间件
      - "traefik.http.middlewares.nocodb-strip.stripprefix.prefixes=/nocodb"
      - "traefik.http.middlewares.nocodb-strip.stripprefix.forceSlash=false"
      
      # 使用strip中间件
      - "traefik.http.routers.nocodb.middlewares=nocodb-strip@docker"
      
      # HTTP到HTTPS重定向保持不变
      - "traefik.http.routers.nocodb-redirect.rule=Host(`ati.victrex.link`) && PathPrefix(`/nocodb`)"
      - "traefik.http.routers.nocodb-redirect.entrypoints=web"
      - "traefik.http.routers.nocodb-redirect.middlewares=redirect-to-https@docker"

  postgres_n8n:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER:-n8n_user}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD:-n8n_pass}
    volumes:
      - postgres_n8n:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    entrypoint: n8n
    command: start
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres_n8n
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER:-n8n_user}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD:-n8n_pass}
      - N8N_PATH=/n8n
      - N8N_HOST=ati.victrex.link
      - N8N_PROTOCOL=https
      - N8N_SECURE_COOKIE=true
      - NODE_ENV=production
      # 正确配置webhook URL，确保以斜杠结尾
      - WEBHOOK_URL=https://ati.victrex.link/n8n/
      # 配置webhook端点路径
      - N8N_ENDPOINT_WEBHOOK=webhook
      - N8N_ENDPOINT_WEBHOOK_TEST=webhook-test
      - N8N_ENDPOINT_WEBHOOK_WAIT=webhook-waiting
      # 可选：增加payload大小限制（如果你的webhook需要处理大文件）
      - N8N_PAYLOAD_SIZE_MAX=20
      - N8N_FORMDATA_FILE_SIZE_MAX=250
    volumes:
      - n8n_storage:/home/node/.n8n
    networks:
      - app-network
    depends_on:
      postgres_n8n:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`ati.victrex.link`) && PathPrefix(`/n8n`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.middlewares.n8n-strip.stripprefix.prefixes=/n8n"
      - "traefik.http.routers.n8n.middlewares=n8n-strip@docker"
      # 添加HTTP到HTTPS的重定向
      - "traefik.http.routers.n8n-redirect.rule=Host(`ati.victrex.link`) && PathPrefix(`/n8n`)"
      - "traefik.http.routers.n8n-redirect.entrypoints=web"
      - "traefik.http.routers.n8n-redirect.middlewares=redirect-to-https@docker"